/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010, 2011, 2012 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

#include <stdlib.h>

#include <libsc/std_constraints.h>
#include <libsc/sc_constraint.h>
#include <libsc/sc_types.h>
#include <libsc/abort.h>
#include <libsc/custom_iters_p.h>

sc_uint
	__constr_all_input,
	__constr_all_output,
	__constr_arc_type_input,
	__constr_arc_type_output,
	__constr_std3_faa,
	__constr_std3_faf,
	__constr_std3_aaf,
	__constr_std3_dfd,
	__constr_std5_faaaa,
	__constr_std5_faaaf,
	__constr_std5_fafaa,
	__constr_std5_fafaf,
	__constr_std5_aaaaf,
	__constr_std5_aafaa,
	__constr_std5_aafaf,
	__constr_std_ord_bin_conn1,
	__constr_std_ord_bin_conn1_def,
	__constr_std_ord_bin_conn2,
	__constr_std3l2_faaaf,
	__constr_std5_3_aaaafaf,
	__constr_std_in_set,
	__constr_std_sely3_p1,
	__constr_std_sely3_u1p2,
	__constr_std_sely3_u1u2p3,
	__constr_std_sely5_p1,
	__constr_std_sely5_u1p2,
	__constr_std_sely5_u1u2p3,
	__constr_std_sely5_u1u2u3p4,
	__constr_std_sely5_u1u2u3u4p5,
	__constr_std_intersect2,
	__constr_std_3l2_5faaaf,
	__constr_std_bin_conn_unord1,
	__constr_std_4ln5_faaaaaffa,
	__constr_std_4l5_faaaaaffa,
	__constr_std_ord_bin_conn1a,
	__constr_std_on_segment;

%%

c_output(std_constraints.cpp)

# here go descriptions of standart constraints
constr_section {
	constraint all_input {
		param sc_addr!
	}
	constraint all_output {
		param sc_addr!
	}
	constraint arc_type_input {
		param sc_type
		param sc_addr!
	}
	constraint arc_type_output {
		param sc_addr!
		param sc_type
	}
	constraint std3_faa {
		param sc_addr!
		param sc_type
		param sc_type
	}
	constraint std3_faf {
		param sc_addr!
		param sc_type
		param sc_addr!
	}
	constraint std3_aaf {
		param sc_type
		param sc_type
		param sc_addr!
	}
	constraint std3_dfd {
		param sc_addr_0
		param int
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr_0
		param int
		param sc_type
	}
	constraint std5_faaaa {
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_type
	}
	constraint std5_faaaf {
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
	}
	constraint std5_fafaa {
		param sc_addr!
		param sc_type
		param sc_addr!
		param sc_type
		param sc_type
	}
	constraint std5_fafaf {
		param sc_addr!
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr!
	}
	constraint std5_aaaaf {
		param sc_type
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
	}
	constraint std5_aafaa {
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_type
	}
	constraint std5_aafaf {
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr!
	}
	# order is :
	#   0 >- 1 >- 2;
	#	2 >- 3 >- 4; 8 >- 7 >- 3;
	#	2 >- 5 >- 6; 10 >- 9 >- 5;
	# 1,3,5,7,9 are arcs
	# 0,8,10 are fixed
	# 4 is fixed
	constraint std_ord_bin_conn1 {
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr!
	}
	# order is :
	#   0 >- 1 >- 2;
	#	2 >- 3 >- 4; 8 >- 7 >- 3;
	#	2 >- 5 >- 6;
	# 1,3,5,7,9 are arcs
	# 0,8,10 are fixed
	# 4 is fixed
	constraint std_ord_bin_conn1_def {
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
	}
	# order is :
	#   0 >- 1 >- 2;
	#	2 >- 3 >- 4; 8 >- 7 >- 3;
	#	2 >- 5 >- 6; 10 >- 9 >- 5;
	# 1,3,5,7,9 are arcs
	# 0,8,10 are fixed
	# 4,6 are fixed
	constraint std_ord_bin_conn2 {
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr!
	}
	# order is:
	# 0 >- 1 >- 2 >- 3 >- 4;
	# 1,3 are arcs
	# 0,4 are fixed
	constraint std3l2_faaaf {
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
	}
	# order is:
	# 0 >- 1 >- 2 >- 5 >- 6;
	# 4 >- 3 >- 1
	# 6,4 are fixeds
	# 1,3,5 are arcs
	constraint std5_3_aaaafaf {
		param sc_type
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr!
	}
	constraint std_in_set {
		param sc_addr!
		param sc_type
	}
	# selects. they are VERY far from optimal
	constraint std_sely3_p1 {
		param sc_addr!
		param sc_type
		param sc_addr_0
		param sc_type
		param sc_addr_0
		param sc_type
	}
	constraint std_sely3_u1p2 {
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr_0
		param sc_type
	}
	constraint std_sely3_u1u2p3 {
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
	}
	constraint std_sely5_p1 {
		param sc_addr!
		param sc_type
		param sc_addr_0	# 2
		param sc_type
		param sc_addr_0	# 3
		param sc_type
		param sc_addr_0	# 4
		param sc_type
		param sc_addr_0	# 5
		param sc_type
	}
	constraint std_sely5_u1p2 {
		param sc_type	# 1
		param sc_addr!	# 2
		param sc_type
		param sc_addr_0	# 3
		param sc_type
		param sc_addr_0	# 4
		param sc_type
		param sc_addr_0	# 5
		param sc_type
	}
	constraint std_sely5_u1u2p3 {
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr_0	# 4
		param sc_type
		param sc_addr_0	# 5
		param sc_type
	}
	constraint std_sely5_u1u2u3p4 {
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_addr_0	# 5
		param sc_type
	}
	constraint std_sely5_u1u2u3u4p5 {
		param sc_type
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
	}
	# 0 >- 1 >- 2 -< 3 -< 4;
	# 0 and 4 are fixed
	constraint std_intersect2 {
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
	}
	# 0 >- 1 >- 2 >- 3, 5; 3 >- 4; 5 >- 6;
	# 0 and 4 are fixed
	constraint std_bin_conn_unord1 {
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_type
	}
	constraint std_3l2_5faaaf {
		param sc_addr!
		param sc_addr!
		param sc_addr!
		param sc_addr!
		param sc_addr!
	}
	constraint std_4ln5_faaaaaffa
	{
		param sc_addr!
		param sc_addr!
		param sc_addr!
	}
	constraint std_4l5_faaaaaffa
	{
		param sc_addr!
		param sc_addr!
		param sc_addr!
	}
	constraint std_ord_bin_conn1a
	{
		param sc_addr!
		param sc_type
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
		param sc_type
		param sc_addr!
		param sc_type
	}
	constraint std_on_segment
	{
		param sc_segment!
		param sc_boolean!
	}
}

#here go descriptions of standart constraints deconstructs
deconstr_section {
	deconstr dec_arc_type_input {
		input t1,e2
		var r1
		constr all_input e2:,r1
		filter check_type r1,t1
		return r1,e2
	}
	deconstr dec_arc_type_output {
		input e1,t2
		var r2
		constr all_output e1:,r2
		filter check_type r2,t2
		return e1,r2
	}
	deconstr dec_std3_faa {
		input e1,t2,t3
		var e2,e3
		constr arc_type_output e1,t2:,e2
		func get_end e2:e3
		filter check_type e3,t3
		return e1,e2,e3
	}
	deconstr dec_std3_faf {
		input e1,t2,e3
		var e2,ce1
		constr all_input e3:,e2
		func get_beg e2:ce1
		filter equal2 e1,ce1
		filter check_type e2,t2
		return e1,e2,e3
	}
	deconstr dec_std3_aaf {
		input t1,t2,e3
		var e1,e2
		constr arc_type_input t2,e3:e2
		func get_beg e2:e1
		filter check_type e1,t1
		return e1,e2,e3
	}
	deconstr dec_std3_dfd {
		input e1,d1,t1,e2,t2,e3,d3,t3
		var ce1,ce3
		filter check_type e2,t2
		func get_beg e2:ce1
		filter equal_with_d e1,ce1,d1,t1
		func get_end e2:ce3
		filter equal_with_d e3,ce3,d3,t3
		return ce1,e2,ce3
	}
	deconstr dec_std5_faaaa {
		input e1,t2,t3,t4,t5
		var e2,e3,e4,e5
		constr std3_faa e1,t2,t3:,e2,e3
		constr std3_aaf t5,t4,e2:e5,e4
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std5_faaaf {
		input e1,t2,t3,t4,e5
		var e2,e3,e4,ce5
		constr all_output e1:,e2
		filter check_type e2,t2
		func get_end e2:e3
		filter check_type e3,t3
		constr all_input e2:,e4
		filter check_type e4,t4
		func get_beg e4:ce5
		filter equal2 e5,ce5
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std5_fafaa {
		input e1,t2,e3,t4,t5
		var e2,e4,e5
		constr std3_faf e1,t2,e3:,e2
		constr std3_aaf t5,t4,e2:e5,e4
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std5_fafaf {
		input e1,t2,e3,t4,e5
		var e2,e4
		constr std3_faf e1,t2,e3:,e2
		constr std3_faf e5,t4,e2:,e4
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std5_aaaaf {
		input t1,t2,t3,t4,e5
		var e1,e2,e3,e4
		constr std3_faa e5,t4,t2:,e4,e2
		func get_beg e2:e1
		filter check_type e1,t1
		func get_end e2:e3
		filter check_type e3,t3
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std5_aafaa {
		input t1,t2,e3,t4,t5
		var e1,e2,e4,e5
		constr std3_aaf t1,t2,e3:e1,e2
		constr std3_aaf t5,t4,e2:e5,e4
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std5_aafaf {
		input t1,t2,e3,t4,e5
		var e1,e2,ce3,e4
		constr std3_aaf t1,t2,e3:e1,e2
		constr std3_faf e5,t4,e2:,e4
		return e1,e2,e3,e4,e5
	}
#	deconstr dec_std5_aafaf {
#		input t1,t2,e3,t4,e5
#		var e1,e2,ce3,e4
#		constr std3_faa e5,t4,t2:,e4,e2
#		func get_beg e2:e1
#		filter check_type e1,t1
#		func get_end e2:ce3
#		filter equal2 e3,ce3
#		return e1,e2,e3,e4,e5
#	}

	deconstr dec_std_ord_bin_conn1 {
		input e0,t1,t2,t3,e4,t5,t6,t7,e8,t9,e10
		var e1,e2,e3,e5,e6,e7,e9
		constr std3_faa e0,t1,t2:,e1,e2
		constr std5_fafaf e2,t3,e4,t7,e8:,e3,,e7
		constr std5_faaaf e2,t5,t6,t9,e10:,e5,e6,e9
		return e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10
	}
	deconstr dec_std_ord_bin_conn1_def {
		input e0,t1,t2,t3,e4,t5,t6,t7,e8
		var e1,e2,e3,e5,e6,e7
		constr std3_faa e0,t1,t2:,e1,e2
		constr std5_fafaf e2,t3,e4,t7,e8:,e3,,e7
		constr std3_faa e2,t5,t6:,e5,e6
		return e0,e1,e2,e3,e4,e5,e6,e7,e8
	}
#	deconstr dec_std_ord_bin_conn1 {
#		input e0,t1,t2,t3,e4,t5,t6,t7,e8,t9,e10
#		var e1,e2,e3,e5,e6,e7,e9
#		constr std5_aafaf t2,t3,e4,t7,e8:e2,e3,,e7
#		constr std3_faf e0,t1,e2:,e1
#		constr std5_faaaf e2,t5,t6,t9,e10:,e5,e6,e9
#		return e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10
#	}
	# order is :
	#   0 >- 1 >- 2;
	#	2 >- 3 >- 4; 8 >- 7 >- 3;
	#	2 >- 5 >- 6; 10 >- 9 >- 5;
	# 1,3,5,7,9 are arcs
	# 0,8,10 are fixed
	# 4,6 are fixed
#	deconstr dec_std_ord_bin_conn2 {
#		input e0,t1,t2,t3,e4,t5,e6,t7,e8,t9,e10
#		var e1,e2,e3,e5,e7,e9
#		constr std3_faa e0,t1,t2:,e1,e2
#		constr std5_fafaf e2,t5,e6,t9,e10:,e5,,e9
#		constr std5_fafaf e2,t3,e4,t7,e8:,e3,,e7
#		return e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10
#	}
	deconstr dec_std_ord_bin_conn2 {
		input e0,t1,t2,t3,e4,t5,e6,t7,e8,t9,e10
		var e1,e2,e3,e5,e7,e9
		constr std5_aafaf t2,t3,e4,t7,e8:e2,e3,,e7
		constr std3_faf e0,t1,e2:,e1
		constr std5_fafaf e2,t5,e6,t9,e10:,e5,,e9
		return e0,e1,e2,e3,e4,e5,e6,e7,e8,e9,e10
	}
	deconstr dec_std3l2_faaaf {
		input e0,t1,t2,t3,e4
		var e1,e2,e3,ce0
		constr all_input e4:,e3
		func get_beg e3:e2
		constr all_input e2:,e1
		func get_beg e1:ce0
		filter equal2 ce0,e0
		filter check_type e1,t1
		filter check_type e2,t2
		filter check_type e3,t3
		return e0,e1,e2,e3,e4
	}
	# order is:
	# 0 >- 1 >- 2 >- 5 >- 6;
	# 4 >- 3 >- 1
	# 6,4 are fixeds
	# 1,3,5 are arcs
	deconstr dec_std5_3_aaaafaf {
		input t0,t1,t2,t3,e4,t5,e6
		var e0,e1,e2,e3,ce4,e5
		constr all_input e6:,e5
		filter check_type e5,t5
		func get_beg e5:e2
		filter check_type e2,t2
		constr all_input e2:,e1
		filter check_type e1,t1
		func get_beg e1,e0
		filter check_type e0,t0
		constr all_input e1:,e3
		func get_beg e3:ce4
		filter equal2 ce4,e4
		filter check_type e3,t3
		return e0,e1,e2,e3,e4,e5,e6
	}
	deconstr dec_std_in_set {
		input set,type_mask
		var end,arc_type
		func get_cpa :arc_type
		constr std3_faa set,arc_type,type_mask:,,end
		return end
	}

	deconstr dec_std_3l2_5faaaf {
		input el,a1,a2,rel,a3
		var t0,ta,t1,t2,a3,res
		func get_0 :t0
		func get_cpa :ta
		constr std5_aafaf t0,ta,el,ta,a1:t1
		constr std5_aafaf t0,ta,t1,ta,a2:t2
		filter is_in_set rel,t2
		constr std5_faaaf t2,ta,t0,ta,a3:,,res
		return res,t2,t1
	}

	# really ugly
	deconstr dec_std_sely3_p1 {
		input s1,t1,s2,t2,s3,t3
		var e1,e2,e3
		constr std_in_set s1,t1:e1
		constr std3_faa e1,t2,t3:,e2,e3
		filter is_in_set s2,e2
		filter is_in_set s3,e3
		return e1,e2,e3
	}
	deconstr dec_std_sely3_u1p2 {
		input t1,s2,t2,s3,t3
		var e1,e2,e3
		constr std_in_set s2,t2:e2
		func get_beg e2:e1
		filter check_type e1,t1
		func get_end e2:e3
		filter check_type e3,t3
		filter is_in_set s3,e3
		return e1,e2,e3
	}
	deconstr dec_std_sely3_u1u2p3 {
		input t1,t2,s3,t3
		var e1,e2,e3
		constr std_in_set s3,t3:e3
		constr std3_aaf t1,t2,e3:e1,e2
		return e1,e2,e3
	}
	deconstr dec_std_sely5_p1 {
		input s1,t1,s2,t2,s3,t3,s4,t4,s5,t5
		var e1,e2,e3,e4,e5
		constr std_in_set s1,t1:e1
		constr std5_faaaa e1,t2,t3,t4,t5:,e2,e3,e4,e5
		filter is_in_set s4,e4
		filter is_in_set s2,e2
		filter is_in_set s3,e3
		filter is_in_set s5,e5
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std_sely5_u1p2 {
		input t1,s2,t2,s3,t3,s4,t4,s5,t5
		var e1,e2,e3,e4,e5
		constr std_in_set s2,t2:e2
		func get_beg e2:e1
		filter check_type e1,t1
		func get_end e2:e3
		filter check_type e3,t3
		filter is_in_set s3,e3
		constr std3_aaf t5,t4,e2:e5,e4
		filter is_in_set s4,e4
		filter is_in_set e5,s5
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std_sely5_u1u2p3 {
		input t1,t2,s3,t3,s4,t4,s5,t5
		var e1,e2,e3,e4,e5
		constr std_in_set s3,t3:e3
		constr std3_aaf t1,t2,e3:e1,e2
		constr std3_aaf t5,t4,e2:e5,e4
		filter is_in_set s4,e4
		filter is_in_set s5,e5
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std_sely5_u1u2u3p4 {
		input t1,t2,t3,s4,t4,s5,t5
		var e1,e2,e3,e4,e5
		constr std_in_set s4,t4:e4
		func get_beg e4:e5
		filter check_type e5,t5
		filter is_in_set s5,e5
		func get_end e4:e2
		filter check_type e2,t2
		func get_beg e2:e1
		func get_end e2:e3
		filter check_type e1,t1
		filter check_type e3,t3
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std_sely5_u1u2u3u4p5 {
		input t1,t2,t3,t4,s5,t5
		var e1,e2,e3,e4,e5
		constr std_in_set s5,t5:e5
		constr std5_aaaaf t1,t2,t3,t4,e5:e1,e2,e3,e4
		return e1,e2,e3,e4,e5
	}
	# 0 >- 1 >- 2 -< 3 -< 4;
	# 0 and 4 are fixed
	deconstr dec_std_intersect2 {
		input e1,t2,t3,t4,e5
		var e2,e3,e4
		constr std3_faa e1,t2,t3:,e2,e3
		constr std3_faf e5,t4,e3:,e4
		return e1,e2,e3,e4,e5
	}
	deconstr dec_std_bin_conn_unord1 {
		input e0,t1,t2,t3,e4,t5,t6
		var e1,e2,e3,e5,e6
		constr std3l2_faaaf e0,t1,t2,t3,e4:,e1,e2,e3
		constr std3_faa e2,t5,t6:,e5,e6
		return e0,e1,e2,e3,e4,e5,e6
	}
	# 0={} >- 1 >- 2 = {} >- 3 >- 4 = {}
	# 5 = (6 = {} -/> 4)
	# ! 8 = (7 = {} -> 3)
	#
	deconstr dec_std_4ln5_faaaaaffa {
		input e0,e6,e7
		var cpa,e1,e2,e3,e4,e5,cna,t0
		func get_cpa :cpa
		func get_cna :cna
		func get_0 :t0
		constr std3_faa e0,cpa,t0:,e1,e2
		constr std3_faa e2,cpa,t0:,e3,e4
		constr std3_faf e6,cna,e4:,e5
		filter not_in_set e7,e3
		return e0,e1,e2,e3,e4,e5,e6
	}
	deconstr dec_std_4l5_faaaaaffa {
		input e0,e6,e7
		var e1,e2,e3,e4,e5,tcpa,tcna,t0,e8
		func get_cpa :tcpa
		func get_cna :tcna
		func get_0 :t0
		constr std3_faa e0,tcpa,t0:,e1,e2
		constr std3_faa e2,tcpa,t0:,e3,e4
		constr std3_faf e6,tcna,e4:,e5
		constr std3_faf e7,tcpa,e3:,e8
		return e0,e1,e2,e3,e4,e5,e6,e7,e8
	}
	deconstr dec_std_ord_bin_conn1a {
		input e0,t1,t2,t3,e4,t5,t6,e7,t8
		var e1,e2,e3,e5,e6,e8
		constr std3_aaf t2,t3,e4:e2,e3
		constr std3_faf e0,t1,e2:,e1
		constr std5_faaaf e2,t5,t6,t8,e7:,e5,e6,e8
		return e0,e1,e2,e3,e4,e5,e6,e7,e8
	}
}

# end of constraints specification
%%

//typedef bool		(*sc_filter)(sc_param *regs,int cnt,int input[]);
//typedef sc_retval	(*sc_func)(sc_param *regs,int cnt,int input[],int output);

// standart filters and functions
static	bool		filter_check_type(sc_param *regs,int cnt,int input[]);
static	bool		filter_equal2(sc_param *regs,int cnt,int input[]);
static	bool		filter_equal_with_d(sc_param *regs,int cnt,int input[]);
static	bool		filter_is_in_set(sc_param *regs,int cnt,int input[]);
static  bool		filter_differ(sc_param *regs,int cnt,int input[]);
static  bool		filter_not_in_set(sc_param *regs,int cnt,int input[]);
static	sc_retval	func_get_beg(sc_param *regs,int cnt,int input[],int output);
static	sc_retval	func_get_end(sc_param *regs,int cnt,int input[],int output);
static	sc_retval	func_get_arc_pos_const(sc_param *regs,int cnt,int input[],int output);
static  sc_retval	func_get_arc_neg_const(sc_param *regs,int cnt,int input[],int output);
static	sc_retval	func_get_0(sc_param *regs,int cnt,int input[],int output);

static struct sc_filter_info
	__check_type = {0,"check_type",filter_check_type},
	__equal2 = {0,"equal2",filter_equal2},
	__equal_with_d = {0,"equal_with_d",filter_equal_with_d},
	__differ = {0,"differ",filter_differ},
	__is_in_set = {0,"is_in_set",filter_is_in_set},
	__not_in_set = {0,"not_in_set",filter_not_in_set};

static struct sc_func_info
	__get_beg = {0,"get_beg",func_get_beg},
	__get_end = {0,"get_end",func_get_end},
	__get_arc_pos_const = {0,"get_cpa",func_get_arc_pos_const},
	__get_arc_neg_const = {0,"get_cna",func_get_arc_neg_const},
	__get_0 = {0,"get_0",func_get_0};

bool filter_differ(sc_param *regs,int cnt,int input[])
{
	sc_addr a1,a2;
	if (cnt<2)
		SC_ABORT(); // really bad choice
	a1 = regs[input[0]].addr;
	a2 = regs[input[1]].addr;
	return a1 != a2;
}

bool filter_check_type(sc_param *regs,int cnt,int input[])
{
	sc_type mask;
	sc_addr	addr;
	if (cnt<2)
		SC_ABORT();
	mask = regs[input[1]].type;
	addr = regs[input[0]].addr;
	return check_sc_type(system_session->get_type(addr),mask);
}

// order is addr1,candidate,d,mask
bool filter_equal_with_d(sc_param *regs,int cnt,int input[])
{
	int d;
	sc_type mask;
	sc_addr addr1,addr2;
	addr1 = regs[input[0]].addr;
	addr2 = regs[input[1]].addr;
	d = regs[input[2]].i;
	mask = regs[input[3]].type;
	if (d) {
		return addr1 == addr2;
	}
	return check_sc_type(addr2->seg->get_type(addr2->impl),mask);
}

bool filter_equal2(sc_param *regs,int cnt,int input[])
{
	sc_addr a1,a2;
	if (cnt<2)
		SC_ABORT();
	a1 = regs[input[0]].addr;
	a2 = regs[input[1]].addr;
	return a1 == a2;
}

bool filter_not_in_set(sc_param *regs,int cnt,int input[])
{
	sc_addr set,element;
	set = regs[input[0]].addr;
	element = regs[input[1]].addr;
	if (!set)
		return true;
	sc_iterator *iter = system_session->create_iterator(sc_constraint_new(
				CONSTR_3_f_a_f,
				set,
				SC_A_CONST|SC_POS,
				element
			),true);
	if (iter->is_over()) {
		delete iter;
		return true;
	}
	delete iter;
	return false;
}

// params are set,element
bool filter_is_in_set(sc_param *regs,int cnt,int input[])
{
	sc_addr set,element;
	set = regs[input[0]].addr;
	element = regs[input[1]].addr;
	if (!set)
		return true;
	sc_iterator *iter = system_session->create_iterator(sc_constraint_new(
				CONSTR_3_f_a_f,
				set,
				SC_A_CONST|SC_POS,
				element
			),true);
	if (iter->is_over()) {
		delete iter;
		return false;
	}
	delete iter;
	return true;
}

sc_retval func_get_beg(sc_param *regs,int cnt,int input[],int output)
{
	sc_addr arc;
	arc = regs[input[0]].addr;
	if (!(regs[output].addr = system_session->get_beg(arc)))
		return RV_ERR_GEN;
	return RV_OK;
}

sc_retval func_get_end(sc_param *regs,int cnt,int input[],int output)
{
	sc_addr arc;
	arc = regs[input[0]].addr;
	if (!(regs[output].addr = system_session->get_end(arc)))
		return RV_ERR_GEN;
	return RV_OK;
}

sc_retval func_get_arc_pos_const(sc_param *regs,int cnt,int input[],int output)
{
	regs[output].type = SC_CONST|SC_POS|SC_ARC_ACCESSORY;
	return RV_OK;
}

sc_retval func_get_arc_neg_const(sc_param *regs,int cnt,int input[],int output)
{
	regs[output].type = SC_CONST|SC_NEG|SC_ARC_ACCESSORY;
	return RV_OK;
}

sc_retval	func_get_0(sc_param *regs,int cnt,int input[],int output)
{
	regs[output].i = 0;
	return RV_OK;
}


#define REGISTER_CONSTRAINT(place,constraint,dec) \
	do { \
		constraint.deconstruct = &dec; \
		if (sc_constraint_register(&constraint)) \
			SC_ABORT(); \
		place = constraint.id; \
	} while(0)
#define REGISTER_FUNC(func) \
	do {\
		if (sc_constraint_register_function(&func)) \
			SC_ABORT(); \
	} while(0)
#define REGISTER_FILT(filt) \
	do {\
		if (sc_constraint_register_filter(&filt)) \
			SC_ABORT(); \
	} while(0)

#define DECONSTRUCT_NIL ((*(sc_deconstruct *)(0)))


void __postinit_std_constraints(sc_session *system)
{
	// system_session = system;
}

void	__init_std_constraints()
{
	REGISTER_FUNC(__get_beg);
	REGISTER_FUNC(__get_end);
	REGISTER_FUNC(__get_arc_pos_const);
	REGISTER_FUNC(__get_arc_neg_const);
	REGISTER_FUNC(__get_0);
	REGISTER_FILT(__check_type);
	REGISTER_FILT(__equal2);
	REGISTER_FILT(__equal_with_d);
	REGISTER_FILT(__is_in_set);
	REGISTER_FILT(__not_in_set);
	REGISTER_FILT(__differ);
	REGISTER_CONSTRAINT(__constr_all_input,all_input,DECONSTRUCT_NIL);
	REGISTER_CONSTRAINT(__constr_all_output,all_output,DECONSTRUCT_NIL);
	REGISTER_CONSTRAINT(__constr_arc_type_input,arc_type_input,dec_arc_type_input);
	REGISTER_CONSTRAINT(__constr_arc_type_output,arc_type_output,dec_arc_type_output);
	REGISTER_CONSTRAINT(__constr_std3_faa,std3_faa,dec_std3_faa);
	REGISTER_CONSTRAINT(__constr_std3_faf,std3_faf,dec_std3_faf);

	REGISTER_CONSTRAINT(__constr_std3_aaf,std3_aaf,dec_std3_aaf);
	REGISTER_CONSTRAINT(__constr_std3_dfd,std3_dfd,dec_std3_dfd);
	REGISTER_CONSTRAINT(__constr_std5_faaaa,std5_faaaa,dec_std5_faaaa);

#if 0
	REGISTER_CONSTRAINT(__constr_std5_faaaf,std5_faaaf,dec_std5_faaaf);
#else
	std5_faaaf.factory = std5_f_a_a_a_f_factory;
	std5_faaaf.deconstruct = &dec_std5_faaaf;
	if (sc_constraint_register(&std5_faaaf))
		SC_ABORT();
	__constr_std5_faaaf = std5_faaaf.id;
#endif

	std_on_segment.factory = std_on_segment_factory;
	std_on_segment.deconstruct = 0;
	if (sc_constraint_register(&std_on_segment))
		SC_ABORT();
	__constr_std_on_segment = std_on_segment.id;

	REGISTER_CONSTRAINT(__constr_std5_fafaa,std5_fafaa,dec_std5_fafaa);
	REGISTER_CONSTRAINT(__constr_std5_fafaf,std5_fafaf,dec_std5_fafaf);
	REGISTER_CONSTRAINT(__constr_std5_aaaaf,std5_aaaaf,dec_std5_aaaaf);
	REGISTER_CONSTRAINT(__constr_std5_aafaa,std5_aafaa,dec_std5_aafaa);
	REGISTER_CONSTRAINT(__constr_std5_aafaf,std5_aafaf,dec_std5_aafaf);
	REGISTER_CONSTRAINT(__constr_std_ord_bin_conn1,std_ord_bin_conn1,dec_std_ord_bin_conn1);
	REGISTER_CONSTRAINT(__constr_std_ord_bin_conn1_def,std_ord_bin_conn1_def,dec_std_ord_bin_conn1_def);
	REGISTER_CONSTRAINT(__constr_std_ord_bin_conn2,std_ord_bin_conn2,dec_std_ord_bin_conn2);
	REGISTER_CONSTRAINT(__constr_std3l2_faaaf,std3l2_faaaf,dec_std3l2_faaaf);
	REGISTER_CONSTRAINT(__constr_std5_3_aaaafaf,std5_3_aaaafaf,dec_std5_3_aaaafaf);
	REGISTER_CONSTRAINT(__constr_std_in_set,std_in_set,dec_std_in_set);
	REGISTER_CONSTRAINT(__constr_std_sely3_p1,std_sely3_p1,dec_std_sely3_p1);
	REGISTER_CONSTRAINT(__constr_std_sely3_u1p2,std_sely3_u1p2,dec_std_sely3_u1p2);
	REGISTER_CONSTRAINT(__constr_std_sely3_u1u2p3,std_sely3_u1u2p3,dec_std_sely3_u1u2p3);
	REGISTER_CONSTRAINT(__constr_std_sely5_p1,std_sely5_p1,dec_std_sely5_p1);
	REGISTER_CONSTRAINT(__constr_std_sely5_u1p2,std_sely5_u1p2,dec_std_sely5_u1p2);
	REGISTER_CONSTRAINT(__constr_std_sely5_u1u2p3,std_sely5_u1u2p3,dec_std_sely5_u1u2p3);
	REGISTER_CONSTRAINT(__constr_std_sely5_u1u2u3p4,std_sely5_u1u2u3p4,dec_std_sely5_u1u2u3p4);
	REGISTER_CONSTRAINT(__constr_std_sely5_u1u2u3u4p5,std_sely5_u1u2u3u4p5,dec_std_sely5_u1u2u3u4p5);
	REGISTER_CONSTRAINT(__constr_std_intersect2,std_intersect2,dec_std_intersect2);
	REGISTER_CONSTRAINT(__constr_std_bin_conn_unord1,std_bin_conn_unord1,dec_std_bin_conn_unord1);
	REGISTER_CONSTRAINT(__constr_std_3l2_5faaaf,std_3l2_5faaaf,dec_std_3l2_5faaaf);
	REGISTER_CONSTRAINT(__constr_std_4ln5_faaaaaffa,std_4ln5_faaaaaffa,dec_std_4ln5_faaaaaffa);
	REGISTER_CONSTRAINT(__constr_std_4l5_faaaaaffa,std_4l5_faaaaaffa,dec_std_4l5_faaaaaffa);
	REGISTER_CONSTRAINT(__constr_std_ord_bin_conn1a,std_ord_bin_conn1a,dec_std_ord_bin_conn1a);
}
