
<%
TYPE_MAPPING = {
        :sc_type => 'SC_PD_TYPE',
        :sc_addr => 'SC_PD_ADDR',
        :sc_addr_0 => 'SC_PD_ADDR_0'
}
INSTR_MAPPING = {
        SCConstraintCompiler::Constraint::ConstrInstr => 'SCD_CONSTR',
        SCConstraintCompiler::Constraint::FuncInstr => 'SCD_FUNC',
        SCConstraintCompiler::Constraint::FilterInstr => 'SCD_FILTER',
}
%>

<% SCConstraintCompiler.constraints.each_value do |constr| %>
static sc_param_spec <%= constr.name %>_ispec[] = {
    <%= ary_to_s constr.params.map { |p| TYPE_MAPPING[p.type] } %>
};
static int <%= constr.name %>_fix[] = {
    <%= ary_to_s constr.params.select(&:fixed).map { |p| constr.var2index[p.name] - 1 } %>
};
static struct sc_constraint_info arc_type_output = {
    0,
    "<%= constr.name %>",
    <%= constr.params.size %>,
    <%= constr.name %>_ispec,
    <%= constr.params.count &:fixed %>,
    <%= constr.name %>_fix
};

<%  constr.code.each_with_index do |instr, i| %>
static int dec_<%= constr.name %>_prg_i<%= i %>_i[] = {
    <%= ary_to_s instr.input.map { |v| constr.var2index[v] - 1 } %>
};
<%      unless instr.output.empty? %>
static int dec_<%= constr.name %>_prg_i<%= i %>_o[] = {
    <%= ary_to_s instr.output.map { |v| constr.var2index[v] - 1 } %>
};
<%      end %>
<%  end %>

static struct sc_deconstruct_prg_item dec_<%= constr.name %>_prg[] = {
<%  constr.code.each_with_index do |instr, i| %>
    {
        <%= INSTR_MAPPING[instr.class] %>,
        <%= instr.input.size %>,
        dec_<%= constr.name %>_prg_i<%= i %>_i,
        <%= instr.output.size %>,
        dec_<%= constr.name %>_prg_i<%= i %>_o,
        "<%= instr.name %>"
    }
};
<%  end %>
<% end %>
